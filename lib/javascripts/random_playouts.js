// Generated by CoffeeScript 1.6.2
var KOMI, MAXIMUM_CREATION_TRIES, determine_move_color, generate_random_move_for, get_all_plausible_moves, is_finished_game, is_plausible_move, playout_for_board, score_game;

MAXIMUM_CREATION_TRIES = 1000;

KOMI = 6.5;

generate_random_move_for = function(board) {
  var color, create_ramdom_move, move, random_coordinate, size, tries;

  random_coordinate = function(size) {
    return Math.floor(Math.random() * size);
  };
  create_ramdom_move = function(size, color, tries) {
    if (tries <= MAXIMUM_CREATION_TRIES) {
      return create_stone(random_coordinate(size), random_coordinate(size), color);
    } else {
      return create_pass_move(color);
    }
  };
  size = board.length;
  color = determine_move_color(board);
  tries = 0;
  move = create_ramdom_move(size, color, tries);
  tries += 1;
  while (!is_plausible_move(move, board)) {
    move = create_ramdom_move(size, color, tries);
    tries += 1;
  }
  return move;
};

determine_move_color = function(board) {
  if (board.moves.length === 0) {
    return BLACK;
  } else {
    return other_color(get_last_move(board).color);
  }
};

is_plausible_move = function(move, board) {
  return is_valid_move(move, board) && !is_eye(move, board);
};

get_all_plausible_moves = function(board) {
  var move_color, plausible_moves;

  move_color = determine_move_color(board);
  plausible_moves = [];
  all_fields_do(board, function(x, y, field_color) {
    var move;

    if (field_color === EMPTY) {
      move = create_stone(x, y, move_color);
      if (is_plausible_move(move, board)) {
        return plausible_moves.push(move);
      }
    }
  });
  return plausible_moves;
};

is_finished_game = function(board) {
  if (board.moves.length > 2) {
    return is_pass_move(get_last_move(board)) && (is_pass_move(board.moves[board.moves.length - 2]));
  }
};

playout_for_board = function(board) {
  var move;

  while (!is_finished_game(board)) {
    move = generate_random_move_for(board);
    play_stone(move, board);
  }
  return board;
};

score_game = function(board) {
  var count_score, determine_score_for_empty, determine_winner, init_score, score;

  init_score = function() {
    var score;

    score = {};
    score[WHITE] = KOMI;
    score[BLACK] = 0;
    return score;
  };
  count_score = function(board, score) {
    return all_fields_do(board, function(x, y, color) {
      if (color !== EMPTY) {
        return score[color] += 1;
      } else {
        return determine_score_for_empty(x, y, board, score);
      }
    });
  };
  determine_score_for_empty = function(x, y, board, score) {
    var all_same_color, colored_neighbours, neighbour_color;

    colored_neighbours = _.select(neighbouring_stones(x, y, board), function(stone) {
      return stone.color === BLACK || stone.color === WHITE;
    });
    if (colored_neighbours.length >= 1) {
      neighbour_color = colored_neighbours[0].color;
      all_same_color = _.all(colored_neighbours, function(neighbour) {
        return neighbour.color === neighbour_color;
      });
      if (all_same_color) {
        return score[neighbour_color] += 1;
      }
    }
  };
  determine_winner = function(score) {
    if (score[WHITE] > score[BLACK]) {
      return score.winner = WHITE;
    } else {
      return score.winner = BLACK;
    }
  };
  score = init_score();
  count_score(board, score);
  determine_winner(score);
  return score;
};
